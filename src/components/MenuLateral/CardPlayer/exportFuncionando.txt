import React, { useState, useEffect } from "react";
import { FaPencilRuler, FaHeart } from "react-icons/fa";
import { GiCheckedShield } from "react-icons/gi";
import './CardPlayer.css';

const CardPlayer = ({ player }) => {
    const storageKey = `playerData-${player.id}`; // Chave única para o player no localStorage

    // Estado para armazenar os dados do jogador (inicializando com dados de localStorage, se existirem)
    const [playerData, setPlayerData] = useState(() => {
        const storedData = localStorage.getItem(storageKey);
        return storedData ? JSON.parse(storedData) : {
            ca: "",
            pv: "",
            mod: "",
            rolagem: "",
            condicao: ""
        };
    });

    const [isExpanded, setIsExpanded] = useState(true);

    // Verifica se 'players' já foi salvo no localStorage e carrega os dados do jogador
    useEffect(() => {
        const players = JSON.parse(localStorage.getItem('players')) || [];

        // Verifica se o player já existe na lista de players
        const playerDetails = players.find(p => p.id === player.id);
        if (playerDetails) {
            // Atualiza playerData apenas se necessário
            setPlayerData(prevData => ({
                ...prevData,
                nome: playerDetails.nome || "",
                ca: playerDetails.ca || "",
                pv: playerDetails.pv || "",
                mod: playerDetails.mod || "",
                rolagem: playerDetails.rolagem || ""
            }));
        }
    }, [player.id]);

    // Altera se o card está expandido ou retraído
    const toggleExpand = () => {
        setIsExpanded((prevState) => !prevState);
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setPlayerData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // Atualiza tanto o playerData específico quanto a lista de players no localStorage
    useEffect(() => {
        if (playerData && Object.keys(playerData).length > 0) {
            // Atualiza os dados do jogador específico
            localStorage.setItem(storageKey, JSON.stringify(playerData));

            // Atualiza a lista de players no localStorage
            const players = JSON.parse(localStorage.getItem('players')) || [];
            const updatedPlayers = players.map(p => 
                p.id === player.id ? { ...p, ...playerData } : p
            );

            // Salvando lista atualizada de players
            localStorage.setItem('players', JSON.stringify(updatedPlayers));
        }
    }, [playerData, storageKey, player.id]);

    const handleSubmit = (e) => {
        e.preventDefault();
    };

    return (
        <div className="card-player">
            <h1>{playerData.nome}</h1>
            <form onSubmit={handleSubmit} className="card-player-info">
                {/* Campos do card - expandido */}
                {isExpanded && (
                    <div>
                        <label>
                            <p>
                                <GiCheckedShield />
                            </p>
                            <input
                                type="text"
                                name="ca"
                                value={playerData.ca}
                                onChange={handleChange}
                            />
                        </label>
                        <label>
                            <p>
                                <FaHeart />
                            </p>
                            <input
                                type="text"
                                name="pv"
                                value={playerData.pv}
                                onChange={handleChange}
                            />
                        </label>
                        <label>
                            <p>MOD: </p>
                            <input
                                type="text"
                                name="mod"
                                value={playerData.mod}
                                onChange={handleChange}
                            />
                        </label>
                        <label>
                            <p>ROLAGEM: </p>
                            <input
                                type="text"
                                name="rolagem"
                                value={playerData.rolagem}
                                onChange={handleChange}
                            />
                        </label>
                        <label>
                            <p>CONDICAO: </p>
                            <input
                                type="text"
                                name="condicao"
                                value={playerData.condicao}
                                onChange={handleChange}
                            />
                        </label>
                        <button type="button" onClick={toggleExpand}>
                            <FaPencilRuler /> Concluir
                        </button>
                    </div>
                )}
            </form>

            {/* Campos do card - retraído */}
            {!isExpanded && (
                <div className="card-player-info-retraido">
                    <label>
                        <GiCheckedShield />
                        <input
                            type="text"
                            name="ca"
                            value={playerData.ca}
                            onChange={handleChange}
                        />
                    </label>
                    <label>
                        <FaHeart />
                        <input
                            type="text"
                            name="pv"
                            value={playerData.pv}
                            onChange={handleChange}
                        />
                    </label>
                    <button type="button" onClick={toggleExpand}>
                        <FaPencilRuler /> Editar
                    </button>
                </div>
            )}
        </div>
    );
};

export default CardPlayer;
